启动品优购项目
	数据库：mysql  #####
	缓存：redis    #####
	搜索引擎：solr （重不重要 可选！！）
	单点登录服务器：cas （重不重要 可选！！）
	dubbo的注册中心：zookeeper (可以规避)
	消息中间件：activemq  #####
	分布式文件系统：fastDFS （不太重要 ）
	用到的框架：SSM(Spring + Spring MVC + Mybatis) #####
							dubbox #####
							spring data (solr + redis) (会用就用！！)
							安全框架 spring security （重不重要 可选！！）
							springboot 
							angular js (不太重要 会一些常用的指令)

		

启动所有 service服务
			sellergoods-service ：商家商品服务
			content-service：广告服务
			search-service：搜索服务
			page-service：页面静态化
			user-service：用户服务
			cart-service：购物车服务
			order-service：订单服务
			pay-service：支付（微信支付）
			seckill-service：秒杀服务



简单的crud操作：&&&&&  
复杂业务功能：#####    购物车 	商品添加  搜索
难点功能：!!!!!! 很多坑！ 不建议   订单模块	 秒杀


manager-web：运营商后台		localhost:9101
						&&&   品牌管理（品牌表）
						&&&   规格管理（规格表 规格选项表）
						&&&&& 模板管理 （模板表 品牌表 规格表 ---> 手机： 手机相关的品牌（多选） 手机相关的规格（多选） 扩展属性（手动填写）  ）
						&&&&& 商品分类管理 （分类表  模板表 ===》指定当前分类对应的模板）      典型树状层级结构（父子关系） 数据的操作  下钻！！
						&&&   广告管理	（广告表 广告分类表）
						
						##### 商品审核 ===>（消息中间件）===> 生成静态页 导入索引库
						##### 商品删除(逻辑删除) ===>（消息中间件）===> 删除静态页 删除索引库 
						&&&   商家审核



shop-web：商家后台   localhost:9102
						##### 商品管理（新增、修改）  （商品基本表 SPU表  商品扩展属性表	商品的SKU表  
																			商品分类表   为新增的商品选择一级	二级	三级分类  ===> 得到模板 ===> 得到商品对应的扩展属性==》填写商品的扩展属性
																			    																														===> 规格 用户选择不同的规格，通过这些不同规格的组合===>商品SKU列表
																			商品图片上传 fastDFS 分布式文件系统（API）
																			商品介绍：富文本编辑器 kindEditor
																			）
						&&&  商家注册	（商家表 ） 商家注册完成之后，未审核状态。必须由运营商后台审核通过才能使用。


port-web：门户首页  localhost:9103
					&&&&& 广告的展示！！ 首页轮播图、今日推介、猜你喜欢、楼层广告
									用到Redis
									广告缓存刷新！！=====>   运营商后台在对广告进行管理（增加、删除、修改）操作的时候。刷新缓存！！   直接删除缓存中的广告数据！！！！
		
		
search-web：搜索页面  localhost:9104  ##### 
						solr 索引库  （对solr有充分的准备 ）
						spring data solr
						
						首页有一个搜索框 用户输入关键字搜索----》 跳转到搜索页（携带搜索关键字）
						根据用户输入的关键字进行全文检索（基本查询）===> Field(  item_keywords    )===>四个域
							<field name="item_keywords" type="text_ik" indexed="true" stored="false" multiValued="true"/>
							<copyField source="item_title" dest="item_keywords"/>
							<copyField source="item_category" dest="item_keywords"/>
							<copyField source="item_seller" dest="item_keywords"/>
							<copyField source="item_brand" dest="item_keywords"/>
						
						分组查询（分类Field item_category ） ====> 获取到当前关键字搜索的所有商品对应的分类（三星） ==》手机、平板电脑
						
						有了分类====>根据分类名称 获取分类名称对应的模板ID  根据模板ID获取它所对应的品牌和规格的信息 在搜索页展示 （分类名称==模板ID  模板ID==关联规格   模板ID==关联品牌 存在Redis）
						
						此时，页面展示了关键字搜索到的商品	分类	品牌	规格	价格区间！！
						用户根据品牌	规格	价格区间对商品进行进一步的筛选。=====》根据品牌	规格	价格区间	进行过滤查询（filter query）
						搜索页面还提供了一个排序选项。价格（升序、降序排）	新品排序（商品创建时间降序排）	默认综合排序	评价	销量	（后两个字段需要经过统计计算得来）
						
						分页查询
						搜索关键字高亮显示


user-web：用户 localhost:9106/register.html  
					##### 	用户注册功能	（用户表 数据很多	注册时只需要填写基本的信息 用户名和密码和手机号   进行短信验证 ）
									短信微服务====> 对接阿里大于 发送短信
									短语验证码的实现过程：	点击获取短信验证码	===>6位的随机数（存在Redis 手机号作为key）==>发送消息给activemq（队列queue）
																															===>短信微服务（spring boot）监听队列queue消息（号码+[随机数 也可以从redis中取]） 调用阿里大于接口发送短信。
																   				填写手机中获取的短信验证码
																   				后台检验：前台用户数据的验证码 + redis中取得的验证码 
								   
car-web：购物车		localhost:9107  #####
					基本思路：
						数据存储	List<Cart>  
													Cart: 商家名称、商家ID、List<TbOrderItem> 商品列表
						存在哪：
								Redis    userId：List<Cart>
						如果用户未登录，也可以添加购物车，存在用户的本地浏览器的Cookie中


 
订单模块      !!!!!!


seckill-web：	秒杀		localhost:9109  !!!!!!
						（秒杀商品表	秒杀订单表）
						秒杀商品的列表展示	（审核通过   开始时间 < 当前时间 < 结束时间	 存库>0）  存入Redis
						
						秒杀详情页	根据秒杀商品ID 从Redis中获取秒杀商品的详细信息，在页面展示
						
						点击立即抢购，进行秒杀	 判断商品在不在（在） 用户没有下单	 [库存>0	               扣减库存]  		生成预订单（存在Redis中 为支付状态）
																		---->  调用微信下单接口 生成支付链接	通过支付链接生成二维码
																		---->		用户在规定时间内支付成功 ----> 预订单 持久到mysql 状态为已经支付 从缓存中删除该用户订单
																						在规定时间内未支付  ----> 删除Redis订单、关闭微信支付订单、库存回退
						定时刷新Mysql数据库中秒杀商品表数据到Redis缓存中 springTask  间隔1分钟
						定时扫描Redis缓存中的秒杀商品数据，判断商品秒杀活动是否结束，如果结束：同步库存数据到mysql秒杀商品表、清除缓存中该商品。




page-web：静态页部署（开发使用 nginx！！！） #####
					页面静态化：
						freemarker (必须掌握freemarker的指令)
						.html 商品详情页 ===>    编写freemarker模板文件  .ftl
									设计数据模型（商品基本表 商品扩展属性表 商品分类	商品sku表）
						
						.ftl + 模型数据 ====> .html文件
					
					部署在哪？ .html文件放在哪？
					静态页通过nginx（高性能/高并发  静态资源服务器）部署。 ===> .html 放在nginx服务器指定的目录下 ===> 页面静态化程序部署在nginx服务器上。
					
					怎么调用？
					运营商后台 商品审核通过(生成静态页)  ===> 发送消息给 activemq（发布/订阅）  ====> 页面静态化服务（启动一个activemq的监听 ） 监听页面静态化的消息（商品id）
					
										 商品审核通过(导入索引库)  ===> 发送消息给 activemq （点对点）  ====> search-service搜索服务启动监听  执行导入索引库（）的逻辑。 
										 
										 商品删除 ====>删除静态页
										 					====>删除索引库 